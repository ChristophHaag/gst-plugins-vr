#!/usr/bin/env python3

import signal
from sinks import *
# from vrsink.widgets import *

import gi
gi.require_version('Gdk', '3.0')
gi.require_version('Gst', '1.0')
gi.require_version('Gtk', '3.0')
gi.require_version('GstVideo', '1.0')
gi.require_version('GstGL', '1.0')

from gi.repository import Gdk, Gst, Gtk, GdkX11, GstVideo, GstGL

import sys

signal.signal(signal.SIGINT, signal.SIG_DFL)

def trace(frame, event, arg):
    print ("%s, %s:%d" % (event, frame.f_code.co_filename, frame.f_lineno))
    return trace
#sys.settrace(trace)


def quit_app(widget, pipeline):
    widget.hide()
    pipeline.set_state(Gst.State.NULL)
    Gtk.main_quit()


class SPHVR:
    @staticmethod
    def pad_added_cb(element, stuff, sink):
        element.link(sink)

    @staticmethod
    def bus_cb(bus, message):
        if message.type == Gst.MessageType.EOS:
            print("eos")
            Gtk.main_quit()
        elif message.type == Gst.MessageType.ERROR:
            print(message.parse_error())
            Gtk.main_quit()
        else:
            pass

    def init_pipeline(self, somesink):
        self.pipeline = Gst.Pipeline()
        src = Gst.ElementFactory.make("uridecodebin", None)
        src.set_property("uri", self.video_uri)
        glupload = Gst.ElementFactory.make("glupload", None)
        glcolorconvert = Gst.ElementFactory.make("glcolorconvert", None)
        videorate = Gst.ElementFactory.make("videorate", None)
        vrcompositor = Gst.ElementFactory.make("vrcompositor", None)
        hmdwarp = Gst.ElementFactory.make("hmdwarp", None)

        # caps
        caps = Gst.Caps.from_string("video/x-raw(memory:GLMemory), width=%d, height=%d, framerate=75/1" % (self.width, self.height))
        cf = Gst.ElementFactory.make("capsfilter")
        cf.set_property("caps", caps)
        
        self.pipeline.add(src, glupload, glcolorconvert, videorate, vrcompositor, cf, hmdwarp, somesink)
        src.link(glupload)
        glupload.link(glcolorconvert)
        glcolorconvert.link(videorate)
        videorate.link(vrcompositor)
        vrcompositor.link(cf)
        
        cf.link(hmdwarp)
        hmdwarp.link(somesink)
        
        src.connect("pad-added", self.pad_added_cb, glupload)

        bus = self.pipeline.get_bus()
        bus.add_signal_watch()
        bus.connect("message", self.bus_cb)

    """
    def init_widgets(self):
        outer_box = Gtk.Box()
        outer_box.set_orientation(Gtk.Orientation.VERTICAL)

        box = Gtk.Box()
        box.set_orientation(Gtk.Orientation.HORIZONTAL)

        #slider_box = Transformation2DSliderBox(transform, sink.scene)
        #slider_box = Transformation3DSliderBox(transform)

        #slider_box = SphereBox()

        #sink.scene.slider_box = slider_box
        #sink.scene.reposition(slider_box.build_mvp())
        # sink.scene.window = window

        #box.add(slider_box)
        box.add(sink)

        outer_box.add(box)

        pause_button = Gtk.Button()
        pause_button.set_label("Pause")
        outer_box.add(pause_button)

        pause_button.connect("clicked", self.pause, pipeline, sink)

        self.window.add(outer_box)
    """

    def __init__(self):

        if (len(sys.argv) != 2):
          print("Usage:")
          print("       sphvr <uri>")
          print("Example:")
          print("       sphvr file:///home/bmonkey/Videos/elephants.webm")
          exit()
        else:
          self.video_uri = sys.argv[1]

        Gtk.init([])
        Gst.init([])
        
        self.width, self.height = 1920, 1080
        self.is_fullscreen = False
        self.aspect = float(self.width)/float(self.height)

        # sink = CairoGLSink(width, height)
        sink = Gst.ElementFactory.make("gtkglsink", None)
        self.init_pipeline(sink)

        self.window = Gtk.Window()
        self.window.connect("delete-event", self.window_closed, self.pipeline)
        self.window.connect("key-press-event", self.key_pressed, self.pipeline)
        self.window.set_default_size(self.width, self.height)
        self.window.set_title("SPHVR")

        #gtksink
        w = sink.get_property("widget")
        self.window.add(w)
        #self.window.add(sink)

        try:
          from gi.repository import GdkPixbuf
          pixbuf = GdkPixbuf.Pixbuf.new_from_file("data/sphvr.png")
          theme = Gtk.IconTheme.get_default()
          theme.add_builtin_icon("sphvr", 256, pixbuf)
          self.window.set_icon_name("sphvr")
        except GLib.Error:
          # no icon
          pass
        self.window.show_all()

        #sink.set_handle()

        if self.pipeline.set_state(Gst.State.PLAYING) == Gst.StateChangeReturn.FAILURE:
            self.pipeline.set_state(Gst.State.NULL)
        else:
            Gtk.main()


    def toggle_fullscreen(self):
      if self.is_fullscreen:
          self.is_fullscreen = False
          self.window.unfullscreen() 
      else:
          screen = Gdk.Screen.get_default()
          self.window.fullscreen_on_monitor(screen, 0)
          self.is_fullscreen = True

    def key_pressed(self, widget, key, pipeline):
        if key.keyval == Gdk.KEY_Escape:
            quit_app(widget, pipeline)
        elif key.keyval == Gdk.KEY_f:
            self.toggle_fullscreen()
        # else:
        #    print(key.keyval)


    @staticmethod
    def pause(button, pipeline, sink):
        if pipeline.get_state(Gst.CLOCK_TIME_NONE)[1] == Gst.State.PAUSED:
            pipeline.set_state(Gst.State.PLAYING)
        else:
            pipeline.set_state(Gst.State.PAUSED)

    @staticmethod
    def window_closed(widget, event, pipeline):
        quit_app(widget, pipeline)

SPHVR()
